webpackHotUpdate("login",{

/***/ "./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Common/UploadForm.vue?vue&type=script&lang=js&":
/*!**************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Common/UploadForm.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.regexp.to-string */ \"./node_modules/core-js/modules/es6.regexp.to-string.js\");\n/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es7.array.includes */ \"./node_modules/core-js/modules/es7.array.includes.js\");\n/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.regexp.split */ \"./node_modules/core-js/modules/es6.regexp.split.js\");\n/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/web.dom.iterable */ \"./node_modules/core-js/modules/web.dom.iterable.js\");\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es6_string_iterator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es6.string.iterator */ \"./node_modules/core-js/modules/es6.string.iterator.js\");\n/* harmony import */ var core_js_modules_es6_string_iterator__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_iterator__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_es6_set__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es6.set */ \"./node_modules/core-js/modules/es6.set.js\");\n/* harmony import */ var core_js_modules_es6_set__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_set__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es6.function.name */ \"./node_modules/core-js/modules/es6.function.name.js\");\n/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _utils_RestApiClient__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/RestApiClient */ \"./src/utils/RestApiClient.js\");\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      headers: [],\n      // headers in the CSV \n      headerMissing: {},\n      headersMapping: {},\n      form: {\n        name: '',\n        file: ''\n      },\n      fileName: '',\n      error: '',\n      percentCompleted: 0\n    };\n  },\n  methods: {\n    getSelection: function getSelection(e) {\n      /**\n       * method to map of the missing headers\n       * it verifies if some conditions are met before submitting the form,\n       * in particular:\n       * 1. missing headers must be map with exsiting headers in the CSV\n       * 2. 2 or more missing headers can not be mapped to the same exsiting header\n       * 3. If missing header can not be mapped with an existing one, then, \n       *      it can be \"created\" a new one and a default value is associated to each row for that header\n       */\n      var key = e.target.name; // key = datetime | message | timestamp_desc\n\n      var value = e.target.options[e.target.options.selectedIndex].text; // value = existing CSV header\n\n      this.headersMapping[key][0] = value;\n\n      if (value === \"New header\") {\n        // ask to the user the default row's value\n        var newHVal = \"\";\n\n        while (!newHVal) {\n          newHVal = prompt(\"Insert the default value for this header\");\n        }\n\n        this.headersMapping[key][1] = newHVal;\n      } else {\n        this.headersMapping[key][1] = \"\";\n      } // get all the values of headersMapping and put them in array\n\n\n      var allValues = [];\n\n      for (var k in this.headersMapping) {\n        allValues.push(this.headersMapping[k][0]);\n      } // 1. check if mapping is completed, i.e., if there are not empty or null field for the mapping\n\n\n      if (!allValues.some(function (e) {\n        return e === '' || !e;\n      })) {\n        // 2. check if all selected headers are unique (except from 'New header')\n        allValues = allValues.filter(function (e) {\n          return e !== \"New header\";\n        });\n\n        if (allValues.length === new Set(allValues).size) {\n          this.error = \"\";\n        } else {\n          // there are duplicates in the selection list\n          this.error = \"New headers mapping contains duplicates\";\n        }\n      } else {\n        // meaning: Exist at least 1 element of allValues that is null or empty\n        this.error = \"Finish headers selection\";\n      }\n    },\n    clearFormData: function clearFormData() {\n      this.form.name = '';\n      this.form.file = '';\n      this.fileName = '';\n      this.headersMapping = {\n        \"datetime\": [null, null],\n        \"message\": [null, null],\n        \"timestamp_desc\": [null, null]\n      };\n      this.headerMissing = {\n        \"datetime\": true,\n        \"message\": true,\n        \"timestamp_desc\": true\n      };\n    },\n    submitForm: function submitForm() {\n      var _this = this;\n\n      if (this.error === 'Please select a file with a valid extension') {\n        return;\n      }\n\n      var formData = new FormData();\n      formData.append('file', this.form.file);\n      formData.append('name', this.form.name);\n      formData.append('provider', 'WebUpload');\n      formData.append('context', this.fileName);\n      formData.append('total_file_size', this.form.file.size);\n      formData.append('sketch_id', this.$store.state.sketch.id);\n      var hMapping = JSON.stringify(this.headersMapping);\n      formData.append('headersMapping', hMapping);\n      var config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        onUploadProgress: function (progressEvent) {\n          this.percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        }.bind(this)\n      };\n      _utils_RestApiClient__WEBPACK_IMPORTED_MODULE_7__[\"default\"].uploadTimeline(formData, config).then(function (response) {\n        _this.$store.dispatch('updateSketch', _this.$store.state.sketch.id);\n\n        _this.$emit('toggleModal');\n\n        _this.clearFormData();\n\n        _this.percentCompleted = 0;\n      }).catch(function (e) {});\n    },\n    setFileName: function setFileName(fileList) {\n      /* 1. Initilize the variables */\n      // this mapping represents a dictionary where for each mandatory fields we assign\n      // 0. name of the column to map\n      // 1. value of the column in case we want to insert a new one\n      //      e.g., we do not have timestamp_desc: we add a new one (the value of rows in this column\n      //            will be the same)\n      this.headersMapping = {\n        \"datetime\": [null, null],\n        \"message\": [null, null],\n        \"timestamp_desc\": [null, null]\n      }; // headers missing in the CSV:\n      // if the headers is present, then the value of the corresponding field is set to true\n\n      this.headerMissing = {\n        \"datetime\": true,\n        \"message\": true,\n        \"timestamp_desc\": true\n      };\n      this.headers = [];\n      var fileName = fileList[0].name;\n      var fileExtension = fileName.split('.')[1];\n      this.form.file = fileList[0];\n      this.form.name = fileName.split('.').slice(0, -1).join('.');\n      this.fileName = fileName;\n      this.error = '';\n      /* 2. Check for the correct extension */\n\n      var allowedExtensions = ['csv', 'json', 'jsonl', 'plaso'];\n\n      if (!allowedExtensions.includes(fileExtension)) {\n        this.error = 'Please select a file with a valid extension';\n      } // TODO: need to verify with JSONL files\n\n      /* 3. Manage CSV missing headers */\n\n\n      if (fileExtension === \"csv\") {\n        var reader = new FileReader();\n        var file = document.getElementById(\"datafile\").files[0]; // read only 1000 B --> it is reasonable that the header of the CSV file ends before the 1000^ byte.\n        // this is done to prevent JS reading a large CSV file (GBs) \n\n        var vueJS = this;\n        reader.readAsText(file.slice(0, 1000));\n\n        reader.onloadend = function (e) {\n          if (e.target.readyState === FileReader.DONE) {\n            // DONE == 2\n\n            /* 3a. Extract the headers from the CSV */\n            var data = e.target.result;\n            var headers = data.split(\"\\n\")[0]; // <--- is there a better way to split columns?\n\n            headers = headers.split(\",\"); // all  headers of CSV uploaded\n            // BIG ASSUMPTION: CSV separator is ','\n\n            for (var i in headers) {\n              vueJS.headers.push({\n                id: i,\n                val: headers[i]\n              });\n            }\n            /* 3b. Check if the mandatory headers are present in the extracted ones */\n\n\n            if (headers.indexOf(\"datetime\") < 0) {\n              vueJS.hMissing[\"datetime\"] = false;\n            } else delete vueJS.headersMapping[\"datetime\"];\n\n            if (headers.indexOf(\"message\") < 0) {\n              vueJS.hMissing[\"message\"] = false;\n            } else delete vueJS.headersMapping[\"message\"];\n\n            if (headers.indexOf(\"timestamp_desc\") < 0) {\n              vueJS.hMissing[\"timestamp_desc\"] = false;\n            } else delete vueJS.headersMapping[\"timestamp_desc\"];\n\n            var hMissingArray = vueJS.isHMissing();\n\n            if (hMissingArray.length > 0) {\n              vueJS.error = 'Missing headers: ' + hMissingArray.toString();\n            }\n          }\n        };\n      }\n    },\n    isHMissing: function isHMissing() {\n      /**\n       * isHMissing --> is there a missing header?\n       * verify if there is at least one missing header\n       * it returns an array containing the missing headers\n       */\n      var hMissingArray = [];\n\n      for (var key in this.hMissing) {\n        if (!this.hMissing[key]) hMissingArray.push(key);\n      }\n\n      return hMissingArray;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Common/UploadForm.vue?vue&type=script&lang=js&\n");

/***/ })

})